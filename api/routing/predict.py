import math

import requests
from fastapi import APIRouter
import pandas as pd
import asyncio
from ..enums.activity import Activity
from ..schemas.user_data import UserData
from ..schemas.response import AdviceResponse
from ..services.gigachat_model import GigaChatModel
from ..services.mechanism_model import MechanismModel
from ..services.stress_model import StressModel
import os
from dotenv import load_dotenv

load_dotenv()

model_url = os.getenv('MODEL_URL')
model_token = os.getenv('MODEL_TOKEN')
router = APIRouter()


@router.post("/predict", response_model=AdviceResponse)
async def process_predict(data: UserData):
    """

    :param data: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    :return: str –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
    """
    df_data = pd.DataFrame([data])

    stress_model = StressModel()
    stress_level = await asyncio.create_task(stress_model.predict(df_data))
    stress_level = math.ceil(abs(stress_level)[0][0])

    mechanism_model = MechanismModel()
    recommend_mechanisms = mechanism_model.predict(stress_level)
    activities = Activity.get_russian_names(recommend_mechanisms)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    prompt = f"""
[–†–æ–ª—å]
¬´–¢—ã ‚Äî —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –±–æ—Ç-–ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:

[–ê–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π]
1. –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ (–æ—Ç 1 –¥–æ 10):
    1-3 (–Ω–∏–∑–∫–∏–π): –ü–æ–¥—á–µ—Ä–∫–Ω–∏, —á—Ç–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø–æ—Ö–≤–∞–ª–∏ –∑–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å.
    4-7 (—Å—Ä–µ–¥–Ω–∏–π): –í—ã—Ä–∞–∑–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.
    8-10 (–≤—ã—Å–æ–∫–∏–π): –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö —É—Å–ø–æ–∫–æ–µ–Ω–∏—è, –ø–æ–¥–±–æ–¥—Ä–∏.

2. –£—á—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å:
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π –∏—Ö –≤ —Å–æ–≤–µ—Ç—ã (–Ω–∞–ø—Ä., "–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–≥—É–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —É–ø–æ–º—è–Ω—É–ª: —ç—Ç–æ —Å–Ω–∏–∑–∏—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ").
–ï—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤–æ–∏ (–¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏, —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ö–æ–±–±–∏, –º–µ–¥–∏—Ç–∞—Ü–∏—è).

[–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞]
1.–ù–∞—á–Ω–∏ —Å —ç–º–ø–∞—Ç–∏–∏: "–Ø –ø–æ–Ω–∏–º–∞—é, –∫–∞–∫ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ‚Ä¶" / "–¢—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–µ–±–µ!"
2. –î–∞–π 2-3 –∫—Ä–∞—Ç–∫–∏—Ö —Å–æ–≤–µ—Ç–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —É—Ä–æ–≤–Ω—é —Å—Ç—Ä–µ—Å—Å–∞.
3. –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –¥–æ–±–∞–≤—å –∏—Ö –≤ –æ—Ç–≤–µ—Ç.
3. –î–æ–±–∞–≤—å –æ–±–æ–¥—Ä—è—é—â—É—é —Ñ—Ä–∞–∑—É –≤ –∫–æ–Ω—Ü–µ (–Ω–∞–ø—Ä., "–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! –Ø –≤–µ—Ä—é –≤ —Ç–µ–±—è üåü").

[–°—Ç–∏–ª—å]
–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (üåø, üí™, üåà).
–ò–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–æ–≤, —Å—Ç—Ä–µ–º–∏—Å—å –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.

[–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ]
–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: {stress_level}
–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activities}
"""

    llm = GigaChatModel()
    token = llm.get_token()
    answer = llm.get_answer(prompt, token)

    return {"advice": answer}
